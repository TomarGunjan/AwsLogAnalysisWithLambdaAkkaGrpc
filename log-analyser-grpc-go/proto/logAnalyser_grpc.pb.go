// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: logAnalyser.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogAnalyserServiceClient is the client API for LogAnalyserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogAnalyserServiceClient interface {
	GetMessageInInterval(ctx context.Context, in *GetMessageInIntervalRequest, opts ...grpc.CallOption) (*GetMessageInIntervalResponse, error)
}

type logAnalyserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogAnalyserServiceClient(cc grpc.ClientConnInterface) LogAnalyserServiceClient {
	return &logAnalyserServiceClient{cc}
}

func (c *logAnalyserServiceClient) GetMessageInInterval(ctx context.Context, in *GetMessageInIntervalRequest, opts ...grpc.CallOption) (*GetMessageInIntervalResponse, error) {
	out := new(GetMessageInIntervalResponse)
	err := c.cc.Invoke(ctx, "/logAnalyser.logAnalyserService/GetMessageInInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogAnalyserServiceServer is the server API for LogAnalyserService service.
// All implementations must embed UnimplementedLogAnalyserServiceServer
// for forward compatibility
type LogAnalyserServiceServer interface {
	GetMessageInInterval(context.Context, *GetMessageInIntervalRequest) (*GetMessageInIntervalResponse, error)
	mustEmbedUnimplementedLogAnalyserServiceServer()
}

// UnimplementedLogAnalyserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogAnalyserServiceServer struct {
}

func (UnimplementedLogAnalyserServiceServer) GetMessageInInterval(context.Context, *GetMessageInIntervalRequest) (*GetMessageInIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageInInterval not implemented")
}
func (UnimplementedLogAnalyserServiceServer) mustEmbedUnimplementedLogAnalyserServiceServer() {}

// UnsafeLogAnalyserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogAnalyserServiceServer will
// result in compilation errors.
type UnsafeLogAnalyserServiceServer interface {
	mustEmbedUnimplementedLogAnalyserServiceServer()
}

func RegisterLogAnalyserServiceServer(s grpc.ServiceRegistrar, srv LogAnalyserServiceServer) {
	s.RegisterService(&LogAnalyserService_ServiceDesc, srv)
}

func _LogAnalyserService_GetMessageInInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageInIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogAnalyserServiceServer).GetMessageInInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logAnalyser.logAnalyserService/GetMessageInInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogAnalyserServiceServer).GetMessageInInterval(ctx, req.(*GetMessageInIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogAnalyserService_ServiceDesc is the grpc.ServiceDesc for LogAnalyserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogAnalyserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logAnalyser.logAnalyserService",
	HandlerType: (*LogAnalyserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessageInInterval",
			Handler:    _LogAnalyserService_GetMessageInInterval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logAnalyser.proto",
}
